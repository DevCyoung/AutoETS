#pragma once

#define MAX_LAYER 32


#define DEVICE	CDevice::GetInst()->GetDevice()
#define CONTEXT	CDevice::GetInst()->GetDeviceContext()


#define CLONE(TYPE) public: virtual TYPE* Clone() {return new TYPE(*this);}
#define CLONE_DISABLE(TYPE) public: virtual TYPE* Clone() {return nullptr;}


#define KEY_TAP(KEY) CKeyMgr::GetInst()->GetKeyState(KEY) == KEY_STATE::TAP
#define KEY_PRESSED(KEY) CKeyMgr::GetInst()->GetKeyState(KEY) == KEY_STATE::PRESSED
#define KEY_RELEASE(KEY) CKeyMgr::GetInst()->GetKeyState(KEY) == KEY_STATE::RELEASE

#define DELTATIME CTimeMgr::GetInst()->GetDeltaTime()


#define SINGLETON(TYPE) private: TYPE(); ~TYPE(); friend class CSingleton<TYPE>;


enum class COMPONENT_TYPE
{
	// update
	TRANSFORM,		// 위치, 크기, 회전
	COLLIDER2D,		// 2차원 충돌
	COLLIDER3D,		// 3차원 충돌
	ANIMATOR2D,		// Sprite Animation
	ANIMATOR3D,		// Bone Sknning Animation
	LIGHT2D,		// 2차원 광원
	LIGHT3D,		// 3차원 광원
	CAMERA,			// Camera

	// render
	MESHRENDER,		// 기본적인 렌더링
	PARTICLESYSTEM, // 입자 렌더링
	TILEMAP,		// 2차원 타일
	LANDSCAPE,		// 3차원 지형
	DECAL,			// 내부 렌더링

	END,

	// custom
	SCRIPT,
};


enum class RES_TYPE
{
	MESHDATA,
	MATERIAL,
	PREFAB,

	MESH,			// 형태
	TEXTURE,		// 이미지
	SOUND,

	GRAPHICS_SHADER,
	COMPUTE_SHADER,

	END,
};

enum class CB_TYPE
{
	TRANSFORM,	// b0
	MATERIAL,	// b1
	GLOBAL,		// b2
	ANIMATOR,   // b3
	TEST,		// b4
	END,
};

//const buffer
enum SCALAR_PARAM
{
	INT_0,
	INT_1,
	INT_2,
	INT_3,

	FLOAT_0,
	FLOAT_1,
	FLOAT_2,
	FLOAT_3,

	VEC2_0,
	VEC2_1,
	VEC2_2,
	VEC2_3,

	VEC4_0,
	VEC4_1,
	VEC4_2,
	VEC4_3,

	MAT_0,
	MAT_1,
	MAT_2,
	MAT_3,
};

enum TEX_PARAM
{
	TEX_0,
	TEX_1,
	TEX_2,
	TEX_3,
	TEX_4,
	TEX_5,
	TEX_6,
	TEX_7,

	TEX_END,
};

enum PIPELINE_STAGE
{
	PIPELINE_STAGE_VERTEX		 = 0x01,
	PIPELINE_STAGE_HULL		 	 = 0x02,
	PIPELINE_STAGE_DOMAIN		 = 0x04,
	PIPELINE_STAGE_GEOMETRY		 = 0x08,
	PIPELINE_STAGE_PIXEL		 = 0x10,
	PIPELINE_STAGE_GRAPHIC_ALL   = PIPELINE_STAGE_VERTEX | PIPELINE_STAGE_HULL | PIPELINE_STAGE_DOMAIN | 
								  PIPELINE_STAGE_GEOMETRY | PIPELINE_STAGE_PIXEL,

	PIPELINE_STAGE_UNORDERDSTATE = 0x20,
};

enum class DIR_TYPE
{
	RIGHT,
	UP,
	FRONT,
};

enum class PROJ_TYPE
{
	ORTHOGRAPHIC,
	PERSPECTIVE,
};

enum class RS_TYPE
{
	CULL_BACK,
	CULL_FRONT,
	CULL_NONE,
	WIRE_FRAME,
	END,
};


enum class DS_TYPE
{
	LESS,
	LESS_EQUAL,
	GREATER,
	GREATER_EQUAL,
	NO_WRITE,			// LESS, DepthWrite X
	NO_TEST_NO_WRITE,	// Test X, DepthWrite X
	END,
};

enum class BS_TYPE
{
	DEFAULT,		// No Blending
	MASK,			// Alpha Coverage
	ALPHA_BLEND,	// Alpha 계수 
	ONE_ONE,		// 1:1 혼합
	END,
};

enum class SHADER_DOMAIN
{
	DOMAIN_OPAQUE,		// 불투명 오브젝트
	DOMAIN_MASK,		// 불투명, 투명
	DOMAIN_TRANSPARENT,	// 반투명
	DOMAIN_POSTPROCESS, // 후 처리
	DOMAIN_UI,
	DOMAIN_UNDEFINED,	// 미정
};

enum class EVENT_TYPE
{
	CREATE_OBJECT,	// wParam : GameObject, lParam : Layer Index
	DELETE_OBJECT,  // wParam : GameObject
	ADD_CHILD,
	DELETE_RESOURCE,
	LEVEL_CHANGE,
};

enum class SHAPE_TYPE
{
	RECT,
	CIRCLE,
	CUBE,
	SPHERE,
	LINE,
	END,
};


enum class COLLIDER2D_TYPE
{
	RECT,
	CIRCLE,
};

enum class LIGHT_TYPE
{
	DIRECTIONAL,
	POINT,
	SPOT,
};


enum class LEVEL_STATE
{
	PLAY,
	PAUSE,
	STOP,
};

enum GPUSTATE
{
	GPUSTATE_UPDATE      =      0x01,
	GPUSTATE_SETSTAGE	 =		0x02,	//bind IM VsSet .....
	GPUSTATE_SETCONST	 =      0x04,   //bind constbuffer 
	GPUSTATE_SETRESVIEW  =      0x08,	//bind resourc, unorder view
	GPUSTATE_PASSVRAM    =	    0x10,   //passVram
	END,
	GPUSTATE_ALL = GPUSTATE_UPDATE | GPUSTATE_SETSTAGE | GPUSTATE_SETCONST | GPUSTATE_SETRESVIEW | GPUSTATE_PASSVRAM,
};