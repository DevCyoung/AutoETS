#include"pch.h"
#include"stdio.h"
#include<iostream>
//COMPONENT_TYPE
extern const char* COMPONENT_TYPE_STR[(UINT)COMPONENT_TYPE::SCRIPT + 1]
{
	"TRANSFORM",
	"COLLIDER2D",
	"COLLIDER3D",
	"ANIMATOR2D",
	"ANIMATOR3D",
	"LIGHT2D",
	"LIGHT3D",
	"CAMERA",
	"MESHRENDER",
	"PARTICLESYSTEM",
	"TILEMAP",
	"LANDSCAPE",
	"DECAL",
	"END",
	"SCRIPT",
};

extern const wchar_t* COMPONENT_TYPE_WSTR[(UINT)COMPONENT_TYPE::SCRIPT + 1]
{
	L"TRANSFORM",
	L"COLLIDER2D",
	L"COLLIDER3D",
	L"ANIMATOR2D",
	L"ANIMATOR3D",
	L"LIGHT2D",
	L"LIGHT3D",
	L"CAMERA",
	L"MESHRENDER",
	L"PARTICLESYSTEM",
	L"TILEMAP",
	L"LANDSCAPE",
	L"DECAL",
	L"END",
	L"SCRIPT",
};
//COMPONENT_TYPE


//RES_TYPE
extern const char* RES_TYPE_STR[(UINT)RES_TYPE::END + 1]
{
	"MESHDATA",
	"MATERIAL",
	"PREFAB",
	"MESH",
	"TEXTURE",
	"SOUND",
	"GRAPHICS_SHADER",
	"COMPUTE_SHADER",
	"END",
};

extern const wchar_t* RES_TYPE_WSTR[(UINT)RES_TYPE::END + 1]
{
	L"MESHDATA",
	L"MATERIAL",
	L"PREFAB",
	L"MESH",
	L"TEXTURE",
	L"SOUND",
	L"GRAPHICS_SHADER",
	L"COMPUTE_SHADER",
	L"END",
};
//RES_TYPE


//CB_TYPE
extern const char* CB_TYPE_STR[(UINT)CB_TYPE::END + 1]
{
	"TRANSFORM",
	"MATERIAL",
	"GLOBAL",
	"ANIMATOR",
	"TEST",
	"END",
};

extern const wchar_t* CB_TYPE_WSTR[(UINT)CB_TYPE::END + 1]
{
	L"TRANSFORM",
	L"MATERIAL",
	L"GLOBAL",
	L"ANIMATOR",
	L"TEST",
	L"END",
};
//CB_TYPE


//DIR_TYPE
extern const char* DIR_TYPE_STR[(UINT)DIR_TYPE::FRONT + 1]
{
	"RIGHT",
	"UP",
	"FRONT",
};

extern const wchar_t* DIR_TYPE_WSTR[(UINT)DIR_TYPE::FRONT + 1]
{
	L"RIGHT",
	L"UP",
	L"FRONT",
};
//DIR_TYPE


//PROJ_TYPE
extern const char* PROJ_TYPE_STR[(UINT)PROJ_TYPE::PERSPECTIVE + 1]
{
	"ORTHOGRAPHIC",
	"PERSPECTIVE",
};

extern const wchar_t* PROJ_TYPE_WSTR[(UINT)PROJ_TYPE::PERSPECTIVE + 1]
{
	L"ORTHOGRAPHIC",
	L"PERSPECTIVE",
};
//PROJ_TYPE


//RS_TYPE
extern const char* RS_TYPE_STR[(UINT)RS_TYPE::END + 1]
{
	"CULL_BACK",
	"CULL_FRONT",
	"CULL_NONE",
	"WIRE_FRAME",
	"END",
};

extern const wchar_t* RS_TYPE_WSTR[(UINT)RS_TYPE::END + 1]
{
	L"CULL_BACK",
	L"CULL_FRONT",
	L"CULL_NONE",
	L"WIRE_FRAME",
	L"END",
};
//RS_TYPE


//DS_TYPE
extern const char* DS_TYPE_STR[(UINT)DS_TYPE::END + 1]
{
	"LESS",
	"LESS_EQUAL",
	"GREATER",
	"GREATER_EQUAL",
	"NO_WRITE",
	"NO_TEST_NO_WRITE",
	"END",
};

extern const wchar_t* DS_TYPE_WSTR[(UINT)DS_TYPE::END + 1]
{
	L"LESS",
	L"LESS_EQUAL",
	L"GREATER",
	L"GREATER_EQUAL",
	L"NO_WRITE",
	L"NO_TEST_NO_WRITE",
	L"END",
};
//DS_TYPE


//BS_TYPE
extern const char* BS_TYPE_STR[(UINT)BS_TYPE::END + 1]
{
	"DEFAULT",
	"MASK",
	"ALPHA_BLEND",
	"ONE_ONE",
	"END",
};

extern const wchar_t* BS_TYPE_WSTR[(UINT)BS_TYPE::END + 1]
{
	L"DEFAULT",
	L"MASK",
	L"ALPHA_BLEND",
	L"ONE_ONE",
	L"END",
};
//BS_TYPE


//SHADER_DOMAIN
extern const char* SHADER_DOMAIN_STR[(UINT)SHADER_DOMAIN::DOMAIN_UNDEFINED + 1]
{
	"DOMAIN_OPAQUE",
	"DOMAIN_MASK",
	"DOMAIN_TRANSPARENT",
	"DOMAIN_POSTPROCESS",
	"DOMAIN_UI",
	"DOMAIN_UNDEFINED",
};

extern const wchar_t* SHADER_DOMAIN_WSTR[(UINT)SHADER_DOMAIN::DOMAIN_UNDEFINED + 1]
{
	L"DOMAIN_OPAQUE",
	L"DOMAIN_MASK",
	L"DOMAIN_TRANSPARENT",
	L"DOMAIN_POSTPROCESS",
	L"DOMAIN_UI",
	L"DOMAIN_UNDEFINED",
};
//SHADER_DOMAIN


//EVENT_TYPE
extern const char* EVENT_TYPE_STR[(UINT)EVENT_TYPE::LEVEL_CHANGE + 1]
{
	"CREATE_OBJECT",
	"DELETE_OBJECT",
	"ADD_CHILD",
	"DELETE_RESOURCE",
	"LEVEL_CHANGE",
};

extern const wchar_t* EVENT_TYPE_WSTR[(UINT)EVENT_TYPE::LEVEL_CHANGE + 1]
{
	L"CREATE_OBJECT",
	L"DELETE_OBJECT",
	L"ADD_CHILD",
	L"DELETE_RESOURCE",
	L"LEVEL_CHANGE",
};
//EVENT_TYPE


//SHAPE_TYPE
extern const char* SHAPE_TYPE_STR[(UINT)SHAPE_TYPE::END + 1]
{
	"RECT",
	"CIRCLE",
	"CUBE",
	"SPHERE",
	"LINE",
	"END",
};

extern const wchar_t* SHAPE_TYPE_WSTR[(UINT)SHAPE_TYPE::END + 1]
{
	L"RECT",
	L"CIRCLE",
	L"CUBE",
	L"SPHERE",
	L"LINE",
	L"END",
};
//SHAPE_TYPE


//COLLIDER2D_TYPE
extern const char* COLLIDER2D_TYPE_STR[(UINT)COLLIDER2D_TYPE::CIRCLE + 1]
{
	"RECT",
	"CIRCLE",
};

extern const wchar_t* COLLIDER2D_TYPE_WSTR[(UINT)COLLIDER2D_TYPE::CIRCLE + 1]
{
	L"RECT",
	L"CIRCLE",
};
//COLLIDER2D_TYPE


//LIGHT_TYPE
extern const char* LIGHT_TYPE_STR[(UINT)LIGHT_TYPE::SPOT + 1]
{
	"DIRECTIONAL",
	"POINT",
	"SPOT",
};

extern const wchar_t* LIGHT_TYPE_WSTR[(UINT)LIGHT_TYPE::SPOT + 1]
{
	L"DIRECTIONAL",
	L"POINT",
	L"SPOT",
};
//LIGHT_TYPE


//LEVEL_STATE
extern const char* LEVEL_STATE_STR[(UINT)LEVEL_STATE::STOP + 1]
{
	"PLAY",
	"PAUSE",
	"STOP",
};

extern const wchar_t* LEVEL_STATE_WSTR[(UINT)LEVEL_STATE::STOP + 1]
{
	L"PLAY",
	L"PAUSE",
	L"STOP",
};
//LEVEL_STATE


